name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'config/**'
      - 'pyproject.toml'
      - '.github/workflows/**'
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'config/**'
      - 'pyproject.toml'

jobs:
  lint-and-type-check:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          version: "latest"
          
      - name: Install dependencies
        run: |
          uv sync --dev
          
      - name: Run ruff linting
        run: |
          uv run ruff check backend/ config/
          
      - name: Run black formatting check
        run: |
          uv run black --check backend/ config/
          
      - name: Run mypy type checking
        run: |
          uv run mypy backend/
        continue-on-error: true  # Type checking errors won't fail the build initially

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          version: "latest"
          
      - name: Install dependencies
        run: |
          uv sync --dev
          
      - name: Create test directories
        run: |
          mkdir -p backend/database
          mkdir -p backend/logs
          mkdir -p backend/output
          mkdir -p docs/data/archives
          
      - name: Initialize test database
        run: |
          uv run python -c "
          import sys
          sys.path.insert(0, '.')
          from backend.app.utils.database import db_manager
          db_manager.init_database()
          print('Test database initialized')
          "
          
      - name: Run pytest
        env:
          GROQ_API_KEY: "test_key_for_ci"  # Mock API key for testing
          DATABASE_PATH: backend/database/test_entertainment_columns.db
          LOG_LEVEL: DEBUG
        run: |
          uv run pytest backend/tests/ -v --cov=backend --cov-report=xml --cov-report=term
          
      - name: Upload coverage to codecov
        if: github.event_name == 'pull_request'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          version: "latest"
          
      - name: Install dependencies
        run: |
          uv sync --dev
          
      - name: Run safety check for vulnerabilities
        run: |
          uv run safety check --json || echo "Security scan completed with warnings"
        continue-on-error: true  # Don't fail build on security warnings initially

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          version: "latest"
          
      - name: Install dependencies
        run: |
          uv sync --dev
          
      - name: Create test environment
        run: |
          mkdir -p backend/database
          mkdir -p backend/logs
          mkdir -p backend/output
          mkdir -p docs/data
          
      - name: Test configuration loading
        run: |
          uv run python -c "
          import sys
          sys.path.insert(0, '.')
          from config.config import config
          print('✅ Configuration loaded successfully')
          print(f'Database path: {config.database_path}')
          "
          
      - name: Test database operations
        run: |
          uv run python -c "
          import sys
          sys.path.insert(0, '.')
          from backend.app.utils.database import db_manager
          from backend.app.repositories.article_repository import ArticleRepository
          
          # Initialize database
          db_manager.init_database()
          
          # Test repository
          repo = ArticleRepository()
          count = repo.get_article_count()
          print(f'✅ Database operations working, article count: {count}')
          "
          
      - name: Test JSON generation
        run: |
          uv run python -c "
          import sys
          sys.path.insert(0, '.')
          from backend.app.services.json_generator import JSONGenerator
          
          generator = JSONGenerator()
          success = generator.generate_meta_json()
          print(f'✅ JSON generation test: {\"passed\" if success else \"failed\"}')
          "

  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, test, security-scan]
    if: always() && github.event_name == 'pull_request'
    
    steps:
      - name: Generate PR summary
        run: |
          echo "## 🚀 CI/CD Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & Type Check | ${{ needs.lint-and-type-check.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Passed' || '⚠️ Check needed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.lint-and-type-check.result }}" == "success" && "${{ needs.test.result }}" == "success" ]]; then
            echo "🎉 All essential checks passed! Ready for review and merge." >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Some checks failed. Please review and fix issues before merging." >> $GITHUB_STEP_SUMMARY
          fi